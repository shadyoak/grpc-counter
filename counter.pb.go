// Code generated by protoc-gen-go.
// source: counter.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	counter.proto

It has these top-level messages:
	CounterValue
*/
package main

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CounterValue struct {
	Count int32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *CounterValue) Reset()                    { *m = CounterValue{} }
func (m *CounterValue) String() string            { return proto.CompactTextString(m) }
func (*CounterValue) ProtoMessage()               {}
func (*CounterValue) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func init() {
	proto.RegisterType((*CounterValue)(nil), "main.CounterValue")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Counter service

type CounterClient interface {
	IncrementCounter(ctx context.Context, opts ...grpc.CallOption) (Counter_IncrementCounterClient, error)
}

type counterClient struct {
	cc *grpc.ClientConn
}

func NewCounterClient(cc *grpc.ClientConn) CounterClient {
	return &counterClient{cc}
}

func (c *counterClient) IncrementCounter(ctx context.Context, opts ...grpc.CallOption) (Counter_IncrementCounterClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Counter_serviceDesc.Streams[0], c.cc, "/main.Counter/IncrementCounter", opts...)
	if err != nil {
		return nil, err
	}
	x := &counterIncrementCounterClient{stream}
	return x, nil
}

type Counter_IncrementCounterClient interface {
	Send(*CounterValue) error
	Recv() (*CounterValue, error)
	grpc.ClientStream
}

type counterIncrementCounterClient struct {
	grpc.ClientStream
}

func (x *counterIncrementCounterClient) Send(m *CounterValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *counterIncrementCounterClient) Recv() (*CounterValue, error) {
	m := new(CounterValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Counter service

type CounterServer interface {
	IncrementCounter(Counter_IncrementCounterServer) error
}

func RegisterCounterServer(s *grpc.Server, srv CounterServer) {
	s.RegisterService(&_Counter_serviceDesc, srv)
}

func _Counter_IncrementCounter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CounterServer).IncrementCounter(&counterIncrementCounterServer{stream})
}

type Counter_IncrementCounterServer interface {
	Send(*CounterValue) error
	Recv() (*CounterValue, error)
	grpc.ServerStream
}

type counterIncrementCounterServer struct {
	grpc.ServerStream
}

func (x *counterIncrementCounterServer) Send(m *CounterValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *counterIncrementCounterServer) Recv() (*CounterValue, error) {
	m := new(CounterValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Counter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "main.Counter",
	HandlerType: (*CounterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IncrementCounter",
			Handler:       _Counter_IncrementCounter_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("counter.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 114 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xce, 0x2f, 0xcd,
	0x2b, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0x4d, 0xcc, 0xcc, 0x53,
	0x52, 0xe1, 0xe2, 0x71, 0x86, 0x08, 0x87, 0x25, 0xe6, 0x94, 0xa6, 0x0a, 0x89, 0x70, 0xb1, 0x82,
	0x95, 0x49, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x38, 0x46, 0xde, 0x5c, 0xec, 0x50, 0x55,
	0x42, 0x0e, 0x5c, 0x02, 0x9e, 0x79, 0xc9, 0x45, 0xa9, 0xb9, 0xa9, 0x79, 0x25, 0x30, 0x31, 0x21,
	0x3d, 0x90, 0x59, 0x7a, 0xc8, 0x06, 0x49, 0x61, 0x11, 0x53, 0x62, 0xd0, 0x60, 0x34, 0x60, 0x4c,
	0x62, 0x03, 0xdb, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x11, 0x3c, 0xc8, 0x8c, 0x90, 0x00,
	0x00, 0x00,
}
