// Code generated by go-bindata.
// sources:
// web/static/index.html
// DO NOT EDIT!

package web

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _webStaticIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x51\xc1\x4e\xeb\x30\x10\x3c\xf7\x49\xef\x1f\x8c\x2f\x6d\x0f\x24\x57\x24\xec\x1c\x08\x45\x20\x81\xa8\xa2\xf4\xc0\xd1\xd8\x4b\x6a\xe4\x38\x91\xb3\xa9\x88\x50\xff\x1d\x7b\x13\x50\x4f\xb3\x99\x9d\xd9\xcc\xae\xc5\xd5\xfd\x6b\x59\xbf\xed\x77\xec\x88\xad\x2b\xfe\xff\x13\x09\x99\x53\xbe\x91\x1c\x3c\x27\x06\x94\x89\xb8\x12\x2d\xa0\x62\xfa\xa8\xc2\x00\x28\xf9\xa1\x7e\xb8\xbe\xe1\xd4\x40\x8b\x0e\x8a\xa6\xda\x97\xac\xec\x46\x8f\x10\x44\x3e\x73\xa9\x3b\xe8\x60\x7b\x64\x43\xd0\x92\xe7\x01\x9c\x9a\x02\x2f\x44\x3e\xd3\x97\x0a\x9c\x7a\x90\x1c\xe1\x0b\xf3\x4f\x75\x52\x33\x4b\x7f\x58\x55\xc9\x56\x95\x9d\xf7\xa0\xd1\x76\x3e\x0b\x31\xd4\xb4\xf9\x18\x3d\x7d\x6e\xb6\xec\x3b\xc9\x16\x5d\x46\x29\xa8\xce\xb4\xb3\xe0\x31\xd3\x73\xae\x43\x6f\x14\x82\x61\x92\xfd\x59\xa9\xf3\xeb\x5f\x99\x4e\x8f\x6d\x32\x34\x80\x3b\x07\xa9\xbc\x9b\x9e\xcc\x66\xbd\x0c\x58\x6f\x33\x1b\x43\x84\xc7\xfa\xe5\x39\x4e\x21\xf6\x96\xac\x67\x82\xf3\x36\xc1\xc5\x76\x22\x5f\xee\x27\xde\x3b\x33\xd1\xba\xc6\x9e\x98\x35\x92\x2f\x23\xd3\x31\x22\x45\xda\x45\x13\x4d\xf3\x73\xfc\x04\x00\x00\xff\xff\x75\x49\xa9\x7f\xa0\x01\x00\x00")

func webStaticIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_webStaticIndexHtml,
		"web/static/index.html",
	)
}

func webStaticIndexHtml() (*asset, error) {
	bytes, err := webStaticIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "web/static/index.html", size: 416, mode: os.FileMode(438), modTime: time.Unix(1467580137, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"web/static/index.html": webStaticIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"web": &bintree{nil, map[string]*bintree{
		"static": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{webStaticIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: AssetInfo, Prefix: k}
	}
	panic("unreachable")
}
